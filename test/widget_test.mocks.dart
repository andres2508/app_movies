// Mocks generated by Mockito 5.4.5 from annotations
// in app_movies/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:app_movies/domain/common/entity.model.dart' as _i3;
import 'package:app_movies/framework/failure.model.dart' as _i6;
import 'package:app_movies/framework/viewModel/base.view.model.dart' as _i4;
import 'package:app_movies/ui/home/home.view.model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i2.HomeViewModel {
  @override
  List<_i3.TMDBEntity> get topRated => (super.noSuchMethod(
        Invocation.getter(#topRated),
        returnValue: <_i3.TMDBEntity>[],
        returnValueForMissingStub: <_i3.TMDBEntity>[],
      ) as List<_i3.TMDBEntity>);

  @override
  List<_i3.TMDBEntity> get popular => (super.noSuchMethod(
        Invocation.getter(#popular),
        returnValue: <_i3.TMDBEntity>[],
        returnValueForMissingStub: <_i3.TMDBEntity>[],
      ) as List<_i3.TMDBEntity>);

  @override
  _i3.TMDBContentType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i3.TMDBContentType.MOVIE,
        returnValueForMissingStub: _i3.TMDBContentType.MOVIE,
      ) as _i3.TMDBContentType);

  @override
  bool get isMovieType => (super.noSuchMethod(
        Invocation.getter(#isMovieType),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.NotifierState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.NotifierState.initial,
        returnValueForMissingStub: _i4.NotifierState.initial,
      ) as _i4.NotifierState);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> loadMovieRequired() => (super.noSuchMethod(
        Invocation.method(#loadMovieRequired, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadSeriesRequired() => (super.noSuchMethod(
        Invocation.method(#loadSeriesRequired, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  dynamic changeType(_i3.TMDBContentType? value) => super.noSuchMethod(
        Invocation.method(#changeType, [value]),
        returnValueForMissingStub: null,
      );

  @override
  void loadStarted() => super.noSuchMethod(
        Invocation.method(#loadStarted, []),
        returnValueForMissingStub: null,
      );

  @override
  void loadEnded() => super.noSuchMethod(
        Invocation.method(#loadEnded, []),
        returnValueForMissingStub: null,
      );

  @override
  void setFailure(_i6.Failure? failure, StackTrace? stacktrace) =>
      super.noSuchMethod(
        Invocation.method(#setFailure, [failure, stacktrace]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> run(Function? body) => (super.noSuchMethod(
        Invocation.method(#run, [body]),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> runWithHandlingError(Function? body) =>
      (super.noSuchMethod(
        Invocation.method(#runWithHandlingError, [body]),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#addListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#removeListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(#notifyListeners, []),
        returnValueForMissingStub: null,
      );
}
